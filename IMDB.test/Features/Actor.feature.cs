// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace IMDB.test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ActorsAPIFeature : object, Xunit.IClassFixture<ActorsAPIFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Actor.feature"
#line hidden
        
        public ActorsAPIFeature(ActorsAPIFeature.FixtureData fixtureData, IMDB_test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Actors API", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get all actors")]
        [Xunit.TraitAttribute("FeatureTitle", "Actors API")]
        [Xunit.TraitAttribute("Description", "Get all actors")]
        [Xunit.InlineDataAttribute("\'api/actors\'", "200 OK", "[{ \"id\": 1, \"name\": \"Tom Holland\", \"bio\": \"Tom bio\",\"dob\": \"1990-12-12T00:00:00\"," +
            "\"sex\": \"F\"},{\"id\": 2,\"name\": \"Robert\",  \"bio\": \"Robert bio\",  \"dob\": \"1990-12-12" +
            "T00:00:00\", \"sex\": \"M\" }]", new string[0])]
        public virtual void GetAllActors(string uRL, string responseCode, string responseData, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("URL", uRL);
            argumentsOfScenario.Add("ResponseCode", responseCode);
            argumentsOfScenario.Add("ResponseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all actors", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("the service is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.When(string.Format("a GET request is made to \'{0}\'", uRL), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
 testRunner.Then(string.Format("the response status code should be \'{0}\'", responseCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 7
 testRunner.And(string.Format("the response should look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Get actor by ID")]
        [Xunit.TraitAttribute("FeatureTitle", "Actors API")]
        [Xunit.TraitAttribute("Description", "Get actor by ID")]
        [Xunit.InlineDataAttribute("\'api/actors/1\'", "200 OK", "{ \"id\": 1, \"name\": \"Tom Holland\", \"bio\": \"Tom bio\",\"dob\": \"1990-12-12T00:00:00\",\"" +
            "sex\": \"F\"}", new string[] {
                "ValidCase"})]
        [Xunit.InlineDataAttribute("\'api/actors/2\'", "404Not Found", "Actor with ID 2 not found", new string[] {
                "InvalidCase"})]
        public virtual void GetActorByID(string uRL, string responseCode, string responseData, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("URL", uRL);
            argumentsOfScenario.Add("ResponseCode", responseCode);
            argumentsOfScenario.Add("ResponseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get actor by ID", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
 testRunner.Given("the service is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.When(string.Format("a GET request is made to \'{0}\'", uRL), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then(string.Format("the response status code should be \'{0}\'", responseCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.And(string.Format("the response should look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Create actor")]
        [Xunit.TraitAttribute("FeatureTitle", "Actors API")]
        [Xunit.TraitAttribute("Description", "Create actor")]
        [Xunit.InlineDataAttribute("\'api/actors\'", "{\"Name\": \"Tom Holland\", \"Bio\": \"Tom bio\", \"DOB\": \"1990-12-12\", \"Sex\": \"F\"}", "200 OK", "1", new string[] {
                "ValidCase"})]
        [Xunit.InlineDataAttribute("\'api/actors\'", "{\"Name\": \"\", \"Bio\": \"Tom bio\", \"DOB\": \"1990-12-12\", \"Sex\": \"F\"}", "400 Bad Request", "Name cannot be empty or null", new string[] {
                "InvalidCase"})]
        [Xunit.InlineDataAttribute("\'api/actors\'", "{\"Name\": \"Tom Holland\", \"Bio\": \"\", \"DOB\": \"1990-12-12\", \"Sex\": \"F\"}", "400 Bad Request", "Bio cannot be empty or null", new string[] {
                "InvalidCase"})]
        [Xunit.InlineDataAttribute("\'api/actors\'", "{\"Name\": \"Tom Holland\", \"Bio\": \"Tom bio\", \"DOB\": \"2023-12-12\", \"Sex\": \"F\"}", "400 Bad Request", "DOB cannot be greater than current date", new string[] {
                "InvalidCase"})]
        [Xunit.InlineDataAttribute("\'api/actors\'", "{\"Name\": \"Tom Holland\", \"Bio\": \"Tom bio\", \"DOB\": \"1990-12-12\", \"Sex\": \"\"}", "400 Bad Request", "Sex cannot be empty or null", new string[] {
                "InvalidCase"})]
        public virtual void CreateActor(string uRL, string requestData, string responseCode, string responseData, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("URL", uRL);
            argumentsOfScenario.Add("RequestData", requestData);
            argumentsOfScenario.Add("ResponseCode", responseCode);
            argumentsOfScenario.Add("ResponseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create actor", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
 testRunner.Given("the service is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
 testRunner.When(string.Format("a POST request is made to \'{0}\'", uRL), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.And(string.Format("with a request body \'{0}\'", requestData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.Then(string.Format("the response status code should be \'{0}\'", responseCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.And(string.Format("the response should look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update actor")]
        [Xunit.TraitAttribute("FeatureTitle", "Actors API")]
        [Xunit.TraitAttribute("Description", "Update actor")]
        [Xunit.InlineDataAttribute("\'api/actors/1\'", "{\"Name\": \"Tom Holland\", \"Bio\": \"Tom is hollywood star\", \"DOB\": \"1990-12-12\", \"Sex" +
            "\": \"M\"}", "200 OK", "", new string[] {
                "ValidCase"})]
        [Xunit.InlineDataAttribute("\'api/actors/1\'", "{\"Name\": \"\", \"Bio\": \"Tom bio\", \"DOB\": \"1990-12-12\", \"Sex\": \"F\"}", "400 Bad Request", "Name cannot be empty or null", new string[] {
                "InvalidCase"})]
        [Xunit.InlineDataAttribute("\'api/actors/1\'", "{\"Name\": \"Tom Holland\", \"Bio\": \"\", \"DOB\": \"1990-12-12\", \"Sex\": \"F\"}", "400 Bad Request", "Bio cannot be empty or null", new string[] {
                "InvalidCase"})]
        [Xunit.InlineDataAttribute("\'api/actors/1\'", "{\"Name\": \"Tom Holland\", \"Bio\": \"Tom bio\", \"DOB\": \"2023-12-12\", \"Sex\": \"F\"}", "400 Bad Request", "DOB cannot be greater than current date", new string[] {
                "InvalidCase"})]
        [Xunit.InlineDataAttribute("\'api/actors/1\'", "{\"Name\": \"Tom Holland\", \"Bio\": \"Tom bio\", \"DOB\": \"1990-12-12\", \"Sex\": \"\"}", "400 Bad Request", "Sex cannot be empty or null", new string[] {
                "InvalidCase"})]
        [Xunit.InlineDataAttribute("\'api/actors/2\'", "{\"Name\": \"Tom Holland\", \"Bio\": \"Tom is hollywood star\", \"DOB\": \"1990-12-12\", \"Sex" +
            "\": \"M\"}", "404 Not Found", "There is no Actor to Update with Id 2", new string[] {
                "InvalidCase"})]
        public virtual void UpdateActor(string uRL, string requestData, string responseCode, string responseData, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("URL", uRL);
            argumentsOfScenario.Add("RequestData", requestData);
            argumentsOfScenario.Add("ResponseCode", responseCode);
            argumentsOfScenario.Add("ResponseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update actor", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 51
 testRunner.Given("the service is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
 testRunner.When(string.Format("a PUT request is made to \'{0}\'", uRL), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.And(string.Format("with a request body \'{0}\'", requestData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
 testRunner.Then(string.Format("the response status code should be \'{0}\'", responseCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
 testRunner.And(string.Format("the response should look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Delete actor")]
        [Xunit.TraitAttribute("FeatureTitle", "Actors API")]
        [Xunit.TraitAttribute("Description", "Delete actor")]
        [Xunit.InlineDataAttribute("\'api/actors/1\'", "200 OK", "", new string[] {
                "ValidCase"})]
        [Xunit.InlineDataAttribute("\'api/actors/2\'", "404 Not Found", "NO Actor to Delete with given  ID 2", new string[] {
                "InValidCase"})]
        public virtual void DeleteActor(string uRL, string responseCode, string responseData, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("URL", uRL);
            argumentsOfScenario.Add("ResponseCode", responseCode);
            argumentsOfScenario.Add("ResponseData", responseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete actor", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 72
 testRunner.Given("the service is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 73
 testRunner.When(string.Format("a Delete request is made to \'{0}\'", uRL), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.Then(string.Format("the response status code should be \'{0}\'", responseCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
 testRunner.And(string.Format("the response should look like \'{0}\'", responseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ActorsAPIFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ActorsAPIFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
